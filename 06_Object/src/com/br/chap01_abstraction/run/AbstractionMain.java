package com.br.chap01_abstraction.run;

import com.br.chap01_abstraction.model.vo.Student;

public class AbstractionMain {
	
	/*
	 * 1. 객체지향언어 : "객체"를 "지향"하는 언어로 "객체 중심"으로 돌아가는 언어
	 * 
	 * 2. 객체란
	 * 	  ㄴ 사전적 정의 : 현실세계에 존재하는 독립적인 존재 (유형,무형,개념,감정, ..)
	 * 					   객체간의 상호작용으로 현실세계는 돌아감
	 * 	  ㄴ 자바에서의 정의 : Heap메모리에 올라가는 모든 것들
	 * 
	 * 3. 객체지향프로그래밍
	 * 	  현실세계에서의 객체들간의 상호작용을 
	 *    프로그래밍을 통해서 가상세계로 구현하는 과정 
	 *    ex) 인터넷 쇼핑몰 (객체 == 회원, 상품, ... / 상호작용 == 구매한다)
	 *    
	 * 4. 구현하고자하는 프로그램 상의 필요한 객체들을 만들기 위해서 (즉, 생성하기 위해)
	 *    => 클래스라는 틀을 먼저 작성할 수 있어야됨 
	 *       (클래스 : 각 객체들의 정보(속성, 기능)들을 담아낼 그릇같은 존재)
	 *        => 추상화 과정 + 캡슐화 과정      
	 * 
	 * 5. 추상화 과정
	 *    1) 구현하고자하는 프로그램상에 필요한 객체들을 생각
	 *    2) 그 객체들이 가지는 공통적인 속성, 기능들을 모두 추출
	 *    3) 추출한 것들을 가지고 내가 구현하고자 했던 프로그램의 
	 *       "실질적인 목적"에 맞춰서 추려줌 (불필요한 것들 제거하는과정)
	 *    4) 추려진 것들을 가지고 어떤 자료형, 어떤 변수명으로 사용할 건지 생각
	 *    
	 *    ex) 학생 관리 프로그램
	 *        1) 학생객체(홍길동, 김영희, 김말똥, ..)
	 *        2) 이름, 나이, 주소, 전화번호, 머리색깔, 발사이즈, ..., 밥먹기, 똥을싼다, ..
	 *        3) 학생 "인적사항"을 관리 프로그램 : 이름, 나이, 주소, 전화번호, 학년, 반
	 *           학생 "성적"을 관리 프로그램 : 이름, 학년, 반, 국어점수, 영어점수, ..
	 *           학생 "건강"을 관리 프로그램 : 이름, 학년, 반, 몸무게, 키, ..
	 *           
	 *           결국 추려진게 이름, 나이, 키 라는 가정하에
	 *           
	 *        4) 이름 : String name
	 *           나이 : int age
	 *           키 : double height
	 * 
	 * 6. 본격적인 프로그래밍
	 * 
	 *    1) "변수"만을 가지고 프로그래밍
	 *        * 변수 - 하나의 자료형의 하나의 값을 보관할 수 있음
	 *        
	 *       홍길동 이라는 학생 객체 --> String name1 = "홍길동"; int age1 = 20; double height1 = 162.3;
	 *       길말똥 이라는 학생 객체 --> String name2 = "김말똥"; int age2 = 21; double height2 = 173.4;
	 *       강개순 이라는 학생 객체 --> String name3 = "강개순"; int age3 = 22; double height3 = 182.7;
	 *    
	 *       문제점 : 다수의 변수를 관리해야되는 번거로움, 반복문 활용도 불가
	 *       
	 *    2) "배열"을 가지고 프로그래밍
	 *        * 배열 - 하나의 자료형의 여러개의 값을 보관할 수 있음
	 *        
	 *       학생들의 이름들을 보관하는    String[] name = {"홍길동", "김말똥", "강개순", ...}
	 *       학생들의 나이들을 보관하는        int[] age = {  20    ,   21    ,   22    , ...}
	 *       학생들의 키  들을 보관하는  double[] height = {162.3   , 173.4   , 182.7   , ...} 
	 *        
	 *       문제점 : 실수로 데이터를 덜 지우게 되면 학생 데이터가 변질될 수 있음
	 *                새로운 데이터를 추가하고자 할 경우 크기를 늘리수가 없어서 
	 *                새로운 배열을 만들고 이관하는 작업해야됨
	 *                
	 *    3) "구조체"의 개념으로 프로그래밍       
	 *    	  * 구조체 - 여러개의 자료형의 여러개의 값들을 보관할 수 있는 개념
	 *        
	 *        String도 보관, int도 보관, double도 보관하는 나만의 자료형 => 구조체 개념 => 클래스
	 *        => Student 클래스로 작성 => Student객체 생성 => 학생정보(이름,나이,키)를 담을 수 있음
	 *        
	 *           객체의 정보들을 담아낼 수 있는 클래스 => model.vo 패키지에 보관하곤함
	 *           com.br.chap01_abstraction.model.vo.Student 
	 */
	

	public static void main(String[] args) {
		
		// Student클래스를 가지고 객체를 생성
		
		// 1. 객체 생성 
		//    클래스명 변수명 = new 클래스명();
		Student hong = new Student();
		
		// 2. 생성된 객체에 속성값을 대입
		//    생성된 객체내의 필드에 값을 대입
		hong.name = "홍길동";
		hong.age = 20;
		hong.height = 172.3;
		
		System.out.println(hong); // 자료형@주소값의16진수
		System.out.println(hong.name + "님의 나이는 " 
							+ hong.age + "이고, 키는 "
								+ hong.height + "cm 입니다.");
		System.out.printf("%s님의 나이는 %d이고, 키는 %.1fcm 입니다.\n", hong.name, hong.age, hong.height);
		
		// 김말똥 학생 객체 만들기 
		// 김말똥,21,160.2
		Student ddong = new Student();
		ddong.name = "김말똥";
		ddong.age = 21;
		ddong.height = 160.2;
		
		// 출력
		System.out.println(ddong);
		System.out.println(ddong.name + "님의 나이는 "
							+ ddong.age + "이고, 키는 "
								+ ddong.height + "cm 입니다.");
		
		/*
		 * 필드를 public으로 했기 때문에 
		 * 객체명.필드명 직접접근이 가능했던거임! 
		 *   => 직접 접근 허용시 외부로부터 악의적인 마음으로 값을 함부러 변질시킬 수 있음
		 *   => 캡슐화 적용해야됨
		 */
		
		
		
	}
	
	
	
	
	
	
	

}
